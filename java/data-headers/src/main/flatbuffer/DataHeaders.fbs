namespace org.apache.arrow.format.dataheaders;

struct Buffer {
  data:long;
  length:int;
}

// Representing a single array (aka ValueVector), typically
table BufferList {
  // With FBS it is not possible to know the length of an array
  n_buffers:int; // I think this field is unnecessary, the comment above does not appear to be true
  buffers:[Buffer];
}

// Multiple arrays -- could be used for long arrays or a
// whole table row batch
table ArrayBatch {
  n_arrays: int;
  arrays: [BufferList];
}

table PrimitiveVariableWidth {
}

table PrimitiveFixedWidth {
  bit_width: int;
}

table Struct {
  children: [Field];
}

table List {
  values:Field;
}

table DenseUnion {
  children: [Field];
}

table SparseUnion {
  children: [Field];
}

union PhysicalType {
  PrimitiveFixedWidth, PrimitiveVariableWidth, Struct
}

union LogicalType {
  Int,
  Bit,
  FloatingPoint,
  Binary,
  Utf8,
  Bool,
  Decimal,
  Timestamp,
  List,
  Struct,
  DenseUnion,
  SparseUnion
}

table Type {
}

table Field {
  // Name is not required, in i.e. a List
  name: string;
  nullable: bool;
  physicalType: PhysicalType;
  logicalType: LogicalType;
}

table Bit {
}

table Int {
  byteWidth: int; // 1 to 8
  signed: bool;
}

enum Precision:int {SINGLE, DOUBLE}

table FloatingPoint {
  precision: Precision;
}

table Utf8 {
}

table Binary {
}

table Bool {
}

table Decimal {
  precision: int;
  scale: int;
}

table Timestamp {
  timezone: string;
}

table JSONScalar {
  dense:bool=true;
}

table Metadata {
  version: int;
  metadata_key:int;
  root: Struct;
}

table BatchSchema {
  metadata: Metadata;
  arrayBatch: ArrayBatch;
}

root_type BatchSchema;